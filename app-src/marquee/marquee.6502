  .include ..\include\subroutines.6502
RENDERSCALEX    =   $20 ; horizontal scale factor (range 1-6)
RENDERSCALEY    =   $21 ; vertical scale factor (range 1-4)
RENDERBOLDEN    =   $22 ; thickening of vertical strokes (after hscale)
RENDERSLANT     =   $23 ; slant factor (256ths; range 0-128)
RENDERINTERLS   =   $24 ; interletter spacing adjustment
RENDERSLANTBIASF=   $25 ; fractional component of x intercept of slant line
RENDERSLANTBIASW=   $26 ; whole component of x intercept of slant line
RENDERSLANTMAX  =   $27 ; x slant diff between highest and lowest rows of rendered text
RENDERRQA       =   $28 ; rightmost requested index of assembled string bitmap
RENDERRQB       =   $29 ; rightmost requested index of bolded string bitmap
RENDERRQC       =   $2A ; rightmost requested index of hscaled string bitmap
RENDERRQD       =   $2B ; rightmost requested index of slanted / final rendered bitmap
RENDERFRONTA    =   $2C ; rightmost valid index of assembled string bitmap
RENDERFRONTB    =   $2D ; rightmost valid index of bolded string bitmap
RENDERFRONTC    =   $2E ; rightmost valid index of hscaled string bitmap
RENDERFRONTD    =   $2F ; rightmost valid index of slanted / final rendered bitmap
LETTERLEFT      =   $30 ; per-row left extent of hscaled letter
STRINGRIGHT     =   $38 ; per-row right extent of assembled string
SCRATCH         =   $40 ; quick use area, 32 bytes
FRAMECOUNTER    =   $60 ; for cursor blink timing
CELLCOLORBYTE   =   $61 ; for working storage of a single compiled attribute byte
FIELDMIN        =   $64 ; minimum field values (as presented to user, at least 6 bytes)
GENERALPTR      =   $6A ; general-purpose movable pointer
SCREENPTR       =   $6C ; general-purpose movable pointer (such as into video memory)
NATURALWEIGHT   =   $6E ; width of scaled vertical strokes before boldening
FIELDSEL        =   $6F ; field selection state (text format mode, range 0-5)
FIELDVAL        =   $70 ; displayed field values (at least 6 bytes)
FIELDMAX        =   $78 ; maximum field values (as presented to user, at least 6 bytes)
KBDIN           = $0244 
FVMCDEST        = $03F8
FVMCSRC         = $03F9
USERCOLORS      = $0400 ; compiled user-selected attributes for all rows (45 bytes)
RENDERSHORT     = $0600 ; assembled, hscaled rendered text (sliding 128px wide window)
RENDERFINAL0    = $0680 ; rowgroup 0 ] final bitmap of rendered text
RENDERFINAL1    = $06A0 ; rowgroup 1 ] (sliding 32px wide window)
RENDERFINAL2    = $06C0 ; rowgroup 2 ] (slant render code relies on this block
RENDERFINAL3    = $06E0 ; rowgroup 3 ]  ending at page boundary)
RENDERLETTER    = $0728 ; individual letters (8x8px)
RENDERWIDELET   = $0730 ; h-scaled individual lettters (48px wide)
SCROLLDELAY     = $0760 ; how many frames to wait between scroll steps
CURBLINKSTATE   = $0770 ; 0 or 1; cursor visibility
MSGBUFCUR       = $077E ; cursor position within message buffer
MSGBUFLEN       = $077F ; length of message buffer
MSGBUF          = $0780 ; message buffer (128 bytes)
BUFMASKA = $7F ; AND w assembled/bolded render buf idx or difference of indices
BUFMASKC = $1F ; AND w vscaled/slanted(final) render buf idx or diff of indices
  .org $1F4C ; this may need to be adjusted to allow room for header
header:
  .text "\x47\xA9\x02\x6A\xBB\x47\xF3\xA7" ; cartridge file format 1986c
  .word pflags-header ; file offset (LE) to base address space page flags
  .word $0000 ; upper bytes of 4-byte number
  .word cartromstart-header ; file offset (LE) to base address space data start
  .word $0000 ; upper bytes of 4-byte number
extensions:
  .text "\x00\x00\x00\x00" ; extensions format not yet defined
pflags:
  ; flags for pages $20xx-$BFxx
  ; 00: floating (no memory installed at this address)
  ; 01: ROM
  ; 02: RAM
  ; 03: NVM (persistent storage in cartridge)
  ; 04: bank-switched flags
  .blk $20,$01 ; (8K ROM @ $2000-$3FFF)
;  .blk $10,$00 ; (4K floating)
  .blk $80,$00 ; (32K floating)
headerend:
  .org $2000 ; actual data contained on emulated cartridge starts here
cartromstart:
  .text "6k Marquee" ; must be 10 bytes
  .text "\x47\xA9\x0C\x1E" ; cartridge signature, must be 47 A9 0C 1E
  .word entry ; cartridge code entry point
interruptroutine: ; this label must equal $2010
  RTI
entry:
  ; copy font from Bank E
  LDY #$E1 ; system font source page start
  LDA #$11 ; video RAM font page start
copyfontpageloop:
  JSR WAITVSCANX ; wait for vertical retrace (preserve A & Y registers please)
  ; enable fast video memory copy
  CLC
  STA FVMCDEST
  STY FVMCSRC
  LDX #$00
copyfontbyteloop:
  STA $00,X ; actual address and value written is overridden by fast video memory copy circuit
  INX
  STA $00,X
  INX
  STA $00,X
  INX
  STA $00,X
  INX
  BNE copyfontbyteloop
  ; disable fast video memory copy
  ; X is zero
  STX FVMCDEST
  INY ; increment source page
  CLC
  ADC #$01 ; increment destination page
  CMP #$20 ; compare against stop page number
  BNE copyfontpageloop
  LDX #$00
  LDY #$00
initpixfontloop:
  JSR WAITVSCANA ; note: sets carry
  LDA datapixels,X
  STA $1000,Y
  STA $1002,Y
  STA $1004,Y
  STA $1006,Y
  LDA datapixels+$20,X
  STA $1008,Y
  STA $100A,Y
  STA $100C,Y
  STA $100E,Y
  INX
  LDA datapixels,X
  STA $1001,Y
  STA $1003,Y
  STA $1005,Y
  STA $1007,Y
  LDA datapixels+$20,X
  STA $1009,Y
  STA $100B,Y
  STA $100D,Y
  STA $100F,Y
  TYA
  ADC #$0F
  TAY
  INX
  CPX #$20
  BCC initpixfontloop
initmsgbuf:
  ; initialize message buffer
  LDX #$FF
initmsgbufloop1:
  INX
  LDA defaultmessagebuf,X
  STA MSGBUF,X
  BNE initmsgbufloop1
  STX MSGBUFLEN
  STX MSGBUFCUR
  INX
  LDY #$20
initmsgbufloop2:
  TYA
  STA MSGBUF,X
  INX
  TXA
  CMP #$80
  BMI initmsgbufloop2
  LDA #$00
  STA CURBLINKSTATE
initrendersettings:
  ; initialize render settings with default
  LDA #$03
  STA RENDERSCALEX
  STA RENDERSCALEY
  LDA #$02
  STA RENDERBOLDEN
  LDA #$04
  STA RENDERINTERLS
  LDA #$35
  STA RENDERSLANT
  LDA #$13
  STA SCROLLDELAY
  ; compile USERCOLORS array from defaults in ROM
  LDX #00
compileallusercolorsloop1:
  TXA
  ASL A
  ASL A
  TAY
  LDA defaultbgcolors+0,Y
  STA SCRATCH+0
  LDA defaultbgcolors+1,Y
  STA SCRATCH+1
  LDA defaultbgcolors+2,Y
  STA SCRATCH+2
  LDA defaultbgcolors+3,Y
  STA SCRATCH+3
  LDA defaultfgcolors+0,Y
  STA SCRATCH+4
  LDA defaultfgcolors+1,Y
  STA SCRATCH+5
  LDA defaultfgcolors+2,Y
  STA SCRATCH+6
  LDA defaultfgcolors+3,Y
  STA SCRATCH+7
  TXA
  TAY
compileallusercolorsloop0:
  LSR SCRATCH+0
  ROR A
  LSR SCRATCH+1
  ROR A
  LSR SCRATCH+4
  ROR A
  LSR SCRATCH+5
  ROR A
  LSR SCRATCH+2
  ROR A
  LSR SCRATCH+3
  ROR A
  LSR SCRATCH+6
  ROR A
  LSR SCRATCH+7
  ROR A
  STA USERCOLORS,Y
  TYA
  CLC
  ADC #$09
  TAY
  CPY #$2D
  BCC compileallusercolorsloop0
  INX
  CPX #$09
  BCC compileallusercolorsloop1
  ; initialize misc state variables
  LDA #$00
  STA FIELDSEL

  .org $2200
textentrymode:
  ; initialize screen for text entry mode
  JSR WAITVSCANA
  LDX #$00
teinitscreenloop:
  LDA proginfo,X ; screen line 0: program info text
  STA $0800,X
  LDA #$20 ; blank for most of screen
  STA $0820,X
  STA $0840,X
  STA $0860,X
  STA $0880,X
  STA $08A0,X
  STA $08C0,X
  STA $08E0,X
  STA $0900,X
  STA $0920,X
  STA $0940,X
  STA $0960,X
  STA $0980,X
  LDA messageprompt,X ; text entry prompt
  STA $09A0,X
  LDA MSGBUF,X ; contents of message buffer
  STA $09C0,X
  LDA MSGBUF+$20,X
  STA $09E0,X
  LDA MSGBUF+$40,X
  STA $0A00,X
  LDA MSGBUF+$60,X
  STA $0A20,X
  LDA #$C0 ; foreground bits on (bottom row only), background bits off
  STA $0A40,X ; rows 0/1, bit 0
  LDA #$CC ; foreground bits on, background bits off
  STA $0A60,X ; rows 2/3, bit 0
  STA $0A80,X
  STA $0AA0,X
  STA $0AC0,X
  STA $0AE0,X
  STA $0B00,X
  STA $0B20,X
  STA $0B40,X ; rows 16/17, bit 0
  STA $0B60,X ; rows 0/1, bit 1
  STA $0B80,X
  STA $0BA0,X
  STA $0BC0,X
  STA $0BE0,X
  STA $0C00,X
  STA $0C20,X
  STA $0C40,X
  STA $0C60,X ; rows 16/17, bit 1
  STA $0C80,X ; rows 0/1, bit 2
  STA $0CA0,X
  STA $0CC0,X
  STA $0CE0,X
  STA $0D00,X
  STA $0D20,X
  STA $0D40,X
  STA $0D60,X
  STA $0D80,X ; rows 16/17, bit 2
  STA $0DA0,X ; rows 0/1, bit 3
  STA $0DC0,X
  STA $0DE0,X
  STA $0E00,X
  STA $0E20,X
  STA $0E40,X
  STA $0E60,X
  STA $0E80,X
  STA $0EA0,X ; rows 16/17, bit 3
  STA $0EC0,X ; rows 0/1, bit 4
  STA $0EE0,X
  STA $0F00,X
  STA $0F20,X
  STA $0F40,X
  STA $0F60,X
  STA $0F80,X
  STA $0FA0,X
  STA $0FC0,X ; rows 16/17, bit 4
  LDA datasyscolors,X ; palette colors
  STA $0FE0,X
  INX
  TXA
  AND #$03
  BNE teinitscreenloop
  JSR WAITVSCANA
  TXA
  CMP #$20
  BNE teinitscreenloop
texteditmainloop:
  LDA FRAMECOUNTER
  CLC
  ADC #$01
  STA FRAMECOUNTER
  AND #$0F
  BNE temljmp1 ; only toggle cursor visibility every 16th frame
  LDA CURBLINKSTATE
  EOR #$01
  STA CURBLINKSTATE
  JSR paintcursor
temljmp1:
  LDA KBDIN ; check for keypress
  BEQ temljmp2
  CMP #$03 ; ctrl+c
  ;BNE 3 ; BEQ paintmode
  ;JMP paintmode
  CMP #$04 ; right cursor
  BEQ tecurr
  CMP #$06 ; left cursor
  BEQ tecurl
  CMP #$08 ; backspace
  BEQ tebksp
  CMP #$0B ; ctrl+k
  BNE 3 ; BEQ textformatmode
  JMP textformatmode
  CMP #$0C ; down cursor
  BEQ tecurd
  CMP #$0D ; enter/return/ctrl+m
  BNE 3 ; BEQ marqueemode
  JMP marqueemode
  CMP #$0E ; up cursor
  BEQ tecuru
  CMP #$7F ; delete
  BEQ tedelr
  ; got here, a graphic key has been pressed
  PHA
  LDA #$00
  STA CURBLINKSTATE
  JSR paintcursor
  LDX MSGBUFCUR
  JSR teinsert
  LDX MSGBUFCUR
  PLA
  STA MSGBUF,X
  STA $09C0,X
  JMP tecurr
temljmp2:
  JSR WAITVSCANA
  JMP texteditmainloop
tecurr:
  LDA MSGBUFCUR
  CMP #$7E ; check if it can't move any more right
  BCS temljmp2
  CMP MSGBUFLEN
  BCS temljmp2
  ADC #$01
  PHA
  LDA #$00
  STA CURBLINKSTATE
  JSR paintcursor
  PLA
  STA MSGBUFCUR
  JMP temljmp2
tecurl:
  LDA MSGBUFCUR
  ; check if it can't move any more left
  BEQ temljmp2
  SEC
  SBC #$01
  PHA
  LDA #$00
  STA CURBLINKSTATE
  JSR paintcursor
  PLA
  STA MSGBUFCUR
  JMP temljmp2
tecurd:
  LDA #$00
  STA CURBLINKSTATE
  JSR paintcursor
  LDA MSGBUFCUR
  CLC
  ADC #$20
  CMP MSGBUFLEN
  BCC tecurdjmp1
  LDA MSGBUFLEN
  CMP #$7F
  BCC tecurdjmp1
  LDA #$7E
tecurdjmp1:
  STA MSGBUFCUR
  JMP temljmp2
tecuru:
  LDA #$00
  STA CURBLINKSTATE
  JSR paintcursor
  LDA MSGBUFCUR
  SEC
  SBC #$20
  BCS tecurujmp1
  LDA #$00
tecurujmp1:
  STA MSGBUFCUR
  JMP temljmp2
tebksp:
  LDA MSGBUFCUR
  ; check if it can't move any more left
  BEQ temljmp2
  SEC
  SBC #$01
  PHA
  LDA #$00
  STA CURBLINKSTATE
  JSR paintcursor
  PLA
  STA MSGBUFCUR
tedelr:
  ; shift all bytes from MSGBUF+MSGBUFCUR+1 to MSGBUF,127 left by one then update display
  LDX MSGBUFCUR
  CPX MSGBUFLEN
  BCS temljmp2 ; do nothing if cursor is already at end
tedelloop:
  LDA MSGBUF+1,X
  STA MSGBUF,X
  BEQ tedeljmp1
  INX
  CPX #$7E
  BCC tedelloop
tedeljmp1:
  LDX MSGBUFLEN
  LDA #$20
  STA MSGBUF,X
  DEX
  STX MSGBUFLEN
  LDA #$00
  STA MSGBUF,X
  LDX MSGBUFCUR
  JSR teupdatetoend
  JMP temljmp2
teinsert:
  ; shift all bytes from MSGBUF,X to MSGBUF,126 right by one then update display
  LDA MSGBUF,X
  STA SCRATCH+0
  INX
teinsloop:
  LDA MSGBUF,X
  STA SCRATCH+1
  LDA SCRATCH+0
  STA MSGBUF,X
  CPX MSGBUFLEN
  BCS teinsjmp1
  INX
  CPX #$7F
  BCS teinsjmp1
  LDA MSGBUF,X
  STA SCRATCH+0
  LDA SCRATCH+1
  STA MSGBUF,X
  CPX MSGBUFLEN
  BCS teinsjmp1
  INX
  CPX #$7F
  BCC teinsloop
teinsjmp1:
  LDX MSGBUFLEN
  LDA #$00
  CPX #$7F
  BCS teinsjmp2
  INX
teinsjmp2:
  STA MSGBUF,X
  STX MSGBUFLEN
  LDX MSGBUFCUR
  ; JMP teupdatetoend
teupdatetoend:
  JSR WAITVSCANA
teupdatetoendloop:
  LDA MSGBUF,X
  STA $09C0,X
  INX
  CPX #$80
  BCC teupdatetoendloop
  RTS

paintcursor:
  LDY #$CC ; cell color byte with no cursor
  LDA CURBLINKSTATE
  BEQ paintcurjmp2
  LDA MSGBUFCUR
  AND #$20 ; even or odd row?
  BEQ paintcurjmp1
  LDA #$AA
paintcurjmp1: ; A is now either $AA (odd row) or $00 (even row)
  EOR #$C6    ;  "           "  $6C (odd row) or $C6 (even row)
  TAY
paintcurjmp2: ; now Y holds correct byte to write to video memory
  LDA MSGBUFCUR
  AND #$5F ; discard row ones bit
  CMP #$40 ;
  BCC paintcurjmp3 ; for first two rows, skip next operation
  SBC #$20 ; shift 40-5f to 20-3f
paintcurjmp3:
  TAX ; computed offset is ready to be used in X register
  JSR WAITVSCANA
  TYA ; recall cell color byte
  STA $0B20,X ; save same byte to each color plane
  STA $0C40,X ; (we can do this because the colors involved are 0 or 31
  STA $0D60,X ; so the bits are the same in each plane)
  STA $0E80,X
  STA $0FA0,X
  RTS

  .org $2500
marqueemode:
  ;set up for scrolling before going into marquee loop
  ; initialize screen colors
  LDA #$40
  STA SCREENPTR+0
  LDA #$0A
  STA SCREENPTR+1
  LDX #$00
mattloop2:
  JSR WAITVSCANA
mattloop1:
  LDY #$00
  LDA USERCOLORS,X
mattloop0:
  STA (SCREENPTR),Y
  INY
  CPY #$20
  BCC mattloop0
  LDA SCREENPTR+0
  CLC
  ADC #$20
  STA SCREENPTR+0
  LDA SCREENPTR+1
  ADC #$00
  STA SCREENPTR+1
  INX
  TXA
  AND #$03
  BEQ mattloop2
  CPX #$2D
  BCC mattloop1
  LDA #$FF ; set all the render pointers to -1
  STA RENDERFRONTA
  STA RENDERFRONTB
  STA RENDERFRONTC
  STA RENDERFRONTD
  STA RENDERRQA
  STA RENDERRQB
  STA RENDERRQC
  STA RENDERRQD ; important that this always be odd
  ; calculate RENDERSLANTMAX = ((8 * RENDERSCALEY - 1) * RENDERSLANT + 128) / 256 + 1
  LDA RENDERSCALEY
  ASL A
  ASL A
  ASL A
  TAX
  DEX
  LDA #$80
  STA SCRATCH+0
  LDA #$00
  STA SCRATCH+1
mslantmaxcalcloop:
  LDA SCRATCH+0
  CLC
  ADC RENDERSLANT
  STA SCRATCH+0
  LDA SCRATCH+1
  ADC #$00
  STA SCRATCH+1
  DEX
  BNE mslantmaxcalcloop
  CLC
  ADC #$01
  STA RENDERSLANTMAX
  ; calculate RENDERSLANTBIAS = (!(SCRATCH+0)) / 2 + $40
  ;                           - (4 * (4 - RENDERSCALEY)) * RENDERSLANT
  LDA #$00
  STA RENDERSLANTBIASW
  LDA #$04
  SEC
  SBC RENDERSCALEY
  ASL
  ASL
  TAY
  LDA SCRATCH+0
  EOR #$FF
  LSR A
  ADC #$40
  STA RENDERSLANTBIASF
mslantbiascalcloop:
  LDA RENDERSLANTBIASF
  SEC
  SBC RENDERSLANT
  STA RENDERSLANTBIASF
  LDA RENDERSLANTBIASW
  SBC #$00
  STA RENDERSLANTBIASW
  DEX
  BNE mslantbiascalcloop
  LDX #$00
  JSR WAITVSCANA
minitscreenloop:
  ; top row of screen: leave as-is
  LDA #$00 ; background quartercells for text canvas area (most of screen)
  STA $0820,X
  STA $0840,X
  STA $0860,X
  STA $0880,X
  STA $08A0,X
  STA $08C0,X
  STA $08E0,X
  STA $0900,X
  STA $0920,X
  STA $0940,X
  STA $0960,X
  STA $0980,X
  STA $09A0,X
  STA $09C0,X
  STA $09E0,X
  STA $0A00,X
  LDA #$20 ; blank for bottom row of screen
  STA $0A20,X
  INX
  TXA
  AND #$0F
  BNE minitscreenloop
  JSR WAITVSCANA
  CPX #$20
  BNE minitscreenloop
  JMP marqueeloop

  .org $2900
textformatmode:
  LDX #$00
tfinitscreenloop1
  JSR WAITVSCANA
tfinitscreenloop0:
  LDA formatfields+$00,X
  STA $0880,X
  LDA formatfields+$10,X
  STA $08C0,X
  LDA formatfields+$20,X
  STA $0900,X
  LDA formatfields+$30,X
  STA $0940,X
  LDA formatfields+$40,X
  STA $0980,X
  LDA formatfields+$50,X
  STA $09C0,X
  LDA #$00 ; blank cell block
  STA $0820,X
  STA $0840,X
  STA $0860,X
  STA $08A0,X
  STA $08E0,X
  STA $0920,X
  STA $0960,X
  STA $09A0,X
  STA $09E0,X
  STA $0A00,X
  LDA textformatmodelabel,X
  STA $0A20,X
  LDA #$CC ; foreground bits on, background bits off
  STA $0A60,X ; rows 2/3, bit 0
  STA $0A80,X
  STA $0AA0,X
  STA $0AC0,X
  STA $0AE0,X
  STA $0B00,X
  STA $0B20,X
  STA $0B40,X ; rows 16/17, bit 0
  STA $0B80,X ; rows 2/3, bit 1
  STA $0BA0,X
  STA $0BC0,X
  STA $0BE0,X
  STA $0C00,X
  STA $0C20,X
  STA $0C40,X
  STA $0C60,X ; rows 16/17, bit 1
  STA $0CA0,X ; rows 2/3, bit 2
  STA $0CC0,X
  STA $0CE0,X
  STA $0D00,X
  STA $0D20,X
  STA $0D40,X
  STA $0D60,X 
  STA $0D80,X ; rows 16/17, bit 2
  STA $0DC0,X ; rows 2/3, bit 3
  STA $0DE0,X
  STA $0E00,X
  STA $0E20,X
  STA $0E40,X
  STA $0E60,X
  STA $0E80,X
  STA $0EA0,X ; rows 16/17, bit 3
  STA $0EE0,X ; rows 2/3, bit 4
  STA $0F00,X
  STA $0F20,X
  STA $0F40,X
  STA $0F60,X
  STA $0F80,X
  STA $0FA0,X
  STA $0FC0,X ; rows 16/17, bit 4
  INX
  CPX #$05
  BEQ tfinitscreenloop1
  CPX #$0B
  BEQ tfinitscreenloop1
  CPX #$10
  BCC tfinitscreenloop0
tfreloadvalues:
  ; load current field values, convert for user as necessary
  LDA RENDERSCALEX
  CLC
  ADC #$40
  STA FIELDVAL+0
  LDA RENDERSCALEY
  ADC #$40
  STA FIELDVAL+1
  LDA RENDERSLANT
  ADC #$40
  STA FIELDVAL+2
  LDA RENDERSCALEX
  ASL A
  STA NATURALWEIGHT
  ADC RENDERBOLDEN
  ADC #$40
  STA FIELDVAL+3
  LDA RENDERINTERLS
  SEC
  SBC RENDERBOLDEN
  CLC
  ADC #$40
  STA FIELDVAL+4
  LDX SCROLLDELAY
  CPX #delayscale-invdelayscale
  BCC 2 ; if x >= length of invdelayscale label, do following
  LDX #delayscale-invdelayscale-1
  LDA invdelayscale,X
  ADC #$40
  STA FIELDVAL+5
  ; load minimum field values, convert for user as necessary
  LDA tffieldminnative+0
  ADC #$40
  STA FIELDMIN+0
  LDA tffieldminnative+1
  ADC #$40
  STA FIELDMIN+1
  LDA tffieldminnative+2
  ADC #$40
  STA FIELDMIN+2
  LDA NATURALWEIGHT
  CLC
  ADC tffieldminnative+3
  ADC #$40
  STA FIELDMIN+3
  LDA tffieldminnative+4
  SEC
  SBC FIELDVAL+3
  CLC
  ADC #$80
  STA FIELDMIN+4
  LDA tffieldminnative+5
  CLC
  ADC #$40
  STA FIELDMIN+5
  ; load maximum field values, convert for user as necessary
  LDA tffieldmaxnative+0
  ADC #$40
  STA FIELDMAX+0
  LDA tffieldmaxnative+1
  ADC #$40
  STA FIELDMAX+1
  LDA tffieldmaxnative+2
  ADC #$40
  STA FIELDMAX+2
  LDA NATURALWEIGHT
  CLC
  ADC tffieldmaxnative+3
  ADC #$40
  STA FIELDMAX+3
  LDA tffieldmaxnative+4
  CLC
  ADC #$40
  STA FIELDMAX+4
  LDA tffieldmaxnative+5
  CLC
  ADC #$40
  STA FIELDMAX+5
  ; initialize screen pointer for field value initial display loop
  LDA #$8C
  STA SCREENPTR+0
  LDA #$08
  STA SCREENPTR+1
  LDX #$00
tfinitscreenloop2:
  LDY #$00
  TXA
  PHA
  LDA FIELDVAL,X
  SEC
  SBC #$40
  JSR byte2decnlz
  JSR WAITVSCANA
tfinitscreenloop3:
  LDA $8D,Y
  STA (SCREENPTR),Y
  INY
  CPY #$03
  BCC tfinitscreenloop3
  CLC
  LDA SCREENPTR+0
  ADC #$40
  STA SCREENPTR+0
  LDA SCREENPTR+1
  ADC #$00
  STA SCREENPTR+1
  PLA
  TAX
  INX
  CPX #$06
  BCC tfinitscreenloop2
  JSR tffieldcursoron
textformatmainloop:
  LDA KBDIN ; check for keypress
  BEQ textformatmainloop
  CMP #$01 ; esc
  BEQ tfreloadvalues
  CMP #$03 ; ctrl+c
  ;BNE 3 ; BEQ paintmode
  ;JMP paintmode
  CMP #$04 ; right cursor
  BEQ tffieldinc
  CMP #$06 ; left cursor
  BEQ tffielddec
  CMP #$0C ; down cursor
  BEQ tfcurdown
  CMP #$0D ; enter/return/ctrl+m
  BEQ tfsaveandmarquee
  CMP #$0E ; up cursor
  BEQ tfcurup
  CMP #$1D ; plus
  BEQ tffieldinc
  CMP #$3D ; equals
  BEQ tffieldinc
  CMP #$60 ; minus
  BEQ tffielddec
  ; got here, some other key has been pressed
tfmljmp2:
  JMP textformatmainloop
tfcurdown:
  JSR tffieldcursoroff
  LDA FIELDSEL
  CMP #$05
  BCS tfcurtop
  ;CLC
  ADC #$01
  STA FIELDSEL
  JSR tffieldcursoron
  JMP textformatmainloop
tfcurtop:
  LDA #$00
  STA FIELDSEL
  JSR tffieldcursoron
  JMP textformatmainloop
tfcurup:
  JSR tffieldcursoroff
  LDA FIELDSEL
  BEQ tfcurbottom
  SEC
  SBC #$01
  STA FIELDSEL
  JSR tffieldcursoron
  JMP textformatmainloop
tfcurbottom:
  LDA #$05
  STA FIELDSEL
  JSR tffieldcursoron
  JMP textformatmainloop
tffielddec:
  LDX FIELDSEL
  LDA FIELDVAL,X
  CMP FIELDMIN,X
  BEQ textformatmainloop ; if value is already = min, do nothing
  BCC textformatmainloop ; if value is already < min, do nothing
  ;SEC
  SBC #$01
  STA FIELDVAL,X
  BCS tffieldupdate ; BRA (Carry set by SBC because no borrow occurred)
tffieldinc:
  LDX FIELDSEL
  LDA FIELDVAL,X
  CMP FIELDMAX,X
  BCS textformatmainloop ; if value is already >= max, do nothing
  ;CLC
  ADC #$01
  STA FIELDVAL,X
tffieldupdate:
  SEC
  SBC #$40
  JSR byte2decnlz
  LDX #$00
  LDA #$8C
  STA SCREENPTR+0
  LDA #$08
  STA SCREENPTR+1
  BNE tffieldupdateptrlooptest ; BRA
tffieldupdateptrloop:
  LDA SCREENPTR+0
  CLC
  ADC #$40
  STA SCREENPTR+0
  LDA SCREENPTR+1
  ADC #$00
  STA SCREENPTR+1
  INX
tffieldupdateptrlooptest:
  CPX FIELDSEL
  BCC tffieldupdateptrloop
  LDY #$00
  LDA $8D
  JSR WAITVSCANX
  STA (SCREENPTR),Y
  INY
  LDA $8E
  STA (SCREENPTR),Y
  INY
  LDA $8F
  STA (SCREENPTR),Y
  LDA FIELDSEL
  CMP #$00
  BEQ tfupdateweightrange
  CMP #$03
  BEQ tfupdatespacingrange
  JMP textformatmainloop
tfupdateweightrange:
  LDA FIELDVAL+0
  SEC
  SBC #$40
  ASL A
  STA NATURALWEIGHT
  CLC
  ADC tffieldminnative+3
  ADC #$40
  STA FIELDMIN+3
  LDA NATURALWEIGHT
  CLC
  ADC tffieldmaxnative+3
  ADC #$40
  STA FIELDMAX+3
  CMP FIELDVAL+3
  BCC tfmaxweight
  LDA FIELDVAL+3
  CMP FIELDMIN+3
  BCC tfminweight
  JMP textformatmainloop
tfminweight:
  LDA FIELDMIN+3
  STA FIELDVAL+3
  BNE tfupdateweightval ; BRA
tfmaxweight:
  LDA FIELDMAX+3
  STA FIELDVAL+3
tfupdateweightval:
  SEC
  SBC #$40
  JSR byte2decnlz
  JSR WAITVSCANA
  LDA $8D
  STA $094C
  LDA $8E
  STA $094D
  LDA $8F
  STA $094E
  ;JMP tfupdatespacingrange
tfupdatespacingrange:
  LDA tffieldminnative+4
  SEC
  SBC FIELDVAL+3
  CLC
  ADC #$80
  STA FIELDMIN+4
  LDA FIELDVAL+4
  CMP FIELDMIN+4
  BCS textformatmainloop
tfminspacing:
  LDA FIELDMIN+4
  STA FIELDVAL+4
  ;BNE tfupdatespacingval ; BRA
tfupdatespacingval:
  SEC
  SBC #$40
  JSR byte2decnlz
  JSR WAITVSCANA
  LDA $8D
  STA $098C
  LDA $8E
  STA $098D
  LDA $8F
  STA $098E
  JMP textformatmainloop
tfsaveandmarquee:
  LDA FIELDVAL+0
  SEC
  SBC #$40
  STA RENDERSCALEX
  LDA FIELDVAL+1
  SEC
  SBC #$40
  STA RENDERSCALEY
  LDA FIELDVAL+2
  SEC
  SBC #$40
  STA RENDERSLANT
  LDA FIELDVAL+3
  SEC
  SBC NATURALWEIGHT
  SEC
  SBC #$40
  STA RENDERBOLDEN
  CLC
  ADC FIELDVAL+4
  SEC
  SBC #$40
  STA RENDERINTERLS
  LDA FIELDVAL+5
  SEC
  SBC #$40
  TAX
  LDA delayscale,X
  STA SCROLLDELAY
  JMP marqueemode

tffieldcursoron:
  LDA #$6C
  STA SCRATCH+16
  LDA #$93
  STA SCRATCH+17
  BNE tffieldcursorset ; BRA
tffieldcursoroff:
  LDA #$CC
  STA SCRATCH+16
  LDA #$CC
  STA SCRATCH+17
tffieldcursorset:
  LDA FIELDSEL
  ASL A
  ASL A
  ASL A
  ASL A
  ASL A
  TAX
  LDY #$F0
  JSR WAITVSCANA
tffieldcursorloop:
  LDA SCRATCH+16
  STA $0A60,X 
  STA $0B80,X 
  STA $0CA0,X 
  STA $0DC0,X 
  STA $0EE0,X 
  LDA SCRATCH+17
  STA $0A80,X
  STA $0BA0,X
  STA $0CC0,X
  STA $0DE0,X
  STA $0F00,X
  INX
  INY
  BNE tffieldcursorloop
  RTS

byte2decnlz:
  JSR BYTE2DECUS
  TXA
  CLC
  ADC #$03
  BEQ byte2decnlzquit
  TAX
  LDA $8C
byte2decnlzloop:
  STA $8C,X
  LDA #$20
  DEX
  BNE byte2decnlzloop
byte2decnlzquit:
  RTS

  .org $3500
proginfo:  .align 5
  .text "6k Marquee      by Geeda for Sis"
messageprompt:
  .text "Message entry\x1b                  "
colorpickerprompt:
  .text "Color selection\x1b                "
paintmodelabel:
  .text "Color paint mode                "
textformatmodelabel:
  .text "Text formatting                 "
defaultmessagebuf:
  .text "Enter text here and it will scroll across the screen\x11\x00"
formatfields:  .align 4
  .text " Horz Scale \x95\x95\x95 "
  .text " Vert Scale \x95\x95\x95 "
  .text " Slant      \x95\x95\x95 "
  .text " Weight     \x95\x95\x95 "
  .text " Spacing    \x95\x95\x95 "
  .text " Speed      \x95\x95\x95 "
defaultbgcolors:
  .byte 4,4,4,4,4,7,4,7,7,7,7,10,7,10,10,10,10,12
  .byte 10,12,12,12,12,22,12,22,22,22,22,24,22,24,24,24,24,24
defaultfgcolors:
  .byte 29,29,17,29,17,17,17,17,20,17,20,20,20,20,26,20,26,26
  .byte 26,26,5,26,5,5,5,5,8,5,8,8,8,8,29,8,29,29
tffieldminnative:
  .byte 1,1,0,0,0,1
tffieldmaxnative:
  .byte 4,4,128,8,8,16
invdelayscale:  .align 6
  .byte 16,16,15,14,13,12,11,11,10,10,9,9,8,8,8,7
  .byte 7,7,7,6,6,6,6,5,5,5,5,5,5,4,4,4
  .byte 4,4,4,4,4,3,3,3,3,3,3,3,3,3,2,2
  .byte 2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1
  .blk 32,1
  .blk 15,0
delayscale:
  .byte 110,63,50,40,32,25,20,16,13,10,8,6,5,4,3,2,1
datasyscolors:  .align 5
  .byte 0,112,135,4,76,252,164,108
  .byte 222,70,110,239,18,242,175,48
  .byte 11,251,33,185,155,16,17,249
  .byte 65,29,189,233,30,255,101,39
datapixels:  .align 6
  .byte $00,$00,$AA,$00,$00,$00,$AA,$00,$00,$AA,$AA,$AA,$00,$AA,$AA,$AA
  .byte $00,$00,$AA,$00,$00,$00,$AA,$00,$00,$AA,$AA,$AA,$00,$AA,$AA,$AA
  .byte $55,$55,$55,$55,$FF,$55,$FF,$55,$55,$55,$55,$55,$FF,$55,$FF,$55
  .byte $55,$FF,$55,$FF,$FF,$FF,$FF,$FF,$55,$FF,$55,$FF,$FF,$FF,$FF,$FF

  .org $3800
marqueeloop:
  ; prepare next column
  INC RENDERRQD ; advance render request by 2 columns
  INC RENDERRQD
  JSR renderdtest ; perform render operation D in final buffer if necessary
  LDA RENDERRQD
  AND #$1E
  TAY
  LDA RENDERFINAL0,Y
  LDX #$00
mformatbitsloop0
  LSR A
  ROR SCRATCH+0,X
  LSR A
  ROR SCRATCH+0,X
  INX
  CPX #$04
  BNE mformatbitsj1
  LDA RENDERFINAL1,Y
mformatbitsj1:
  CPX #$08
  BNE mformatbitsj2
  LDA RENDERFINAL2,Y
mformatbitsj2:
  CPX #$0C
  BNE mformatbitsj3
  LDA RENDERFINAL3,Y
mformatbitsj3:
  CPX #$10
  BCC mformatbitsloop0
  LDA RENDERFINAL0+1,Y
  LDX #$00
mformatbitsloop1
  LSR A
  ROR SCRATCH+0,X
  LSR A
  STA SCRATCH+16
  LDA SCRATCH+0,X
  ROR A
  LSR A
  LSR A
  LSR A
  LSR A
  STA SCRATCH+0,X
  LDA SCRATCH+16
  INX
  CPX #$04
  BNE mformatbitsj5
  LDA RENDERFINAL1+1,Y
mformatbitsj5:
  CPX #$08
  BNE mformatbitsj6
  LDA RENDERFINAL2+1,Y
mformatbitsj6:
  CPX #$0C
  BNE mformatbitsj7
  LDA RENDERFINAL3+1,Y
mformatbitsj7:
  CPX #$10
  BCC mformatbitsloop1
  ; minor delay
  LDX SCROLLDELAY
mdelayloop:
  LDA KBDIN ; check for keypress
  BEQ mjmp2
  CMP #$03 ; ctrl+c
  ;BNE 3 ; BEQ paintmode
  ;JMP paintmode
  CMP #$0B ; ctrl+k
  BNE 3 ; BEQ textformatmode
  JMP textformatmode
  CMP #$0D ; enter/return/ctrl+m
  BNE 3 ; BEQ textentrymode
  JMP textentrymode
mjmp2:
  JSR WAITVSCANA
  DEX
  BNE mdelayloop
  ; scroll screen one column left
  ; (TODO: jump to scroll1y..scroll4y as needed based on text height)
scroll4y:
  LDX #$00
scrollcolumnloop4:
  LDA $0821,X
  STA $0820,X
  LDA $0841,X
  STA $0840,X
  LDA $09E1,X
  STA $09E0,X
  LDA $0A01,X
  STA $0A00,X
  INX
  CPX #$1F
  BCC scrollcolumnloop4
  LDA SCRATCH+0
  STA $083F
  LDA SCRATCH+1
  STA $085F
  LDA SCRATCH+14
  STA $09FF
  LDA SCRATCH+15
  STA $0A1F
scroll3y:
  LDX #$00
scrollcolumnloop3:
  LDA $0861,X
  STA $0860,X
  LDA $0881,X
  STA $0880,X
  LDA $09A1,X
  STA $09A0,X
  LDA $09C1,X
  STA $09C0,X
  INX
  CPX #$0A
  BNE 3 ; just enough to skip following JSR
  JSR WAITVSCANA
  CPX #$1F
  BCC scrollcolumnloop3
  LDA SCRATCH+2
  STA $087F
  LDA SCRATCH+3
  STA $089F
  LDA SCRATCH+12
  STA $09BF
  LDA SCRATCH+13
  STA $09DF
scroll2y:
  LDX #$00
scrollcolumnloop2:
  LDA $08A1,X
  STA $08A0,X
  LDA $08C1,X
  STA $08C0,X
  LDA $0961,X
  STA $0960,X
  LDA $0981,X
  STA $0980,X
  INX
  CPX #$15
  BNE 3 ; just enough to skip following JSR
  JSR WAITVSCANA
  CPX #$1F
  BCC scrollcolumnloop2
  LDA SCRATCH+4
  STA $08BF
  LDA SCRATCH+5
  STA $08DF
  LDA SCRATCH+10
  STA $097F
  LDA SCRATCH+11
  STA $099F
scroll1y:
  LDX #$00
scrollcolumnloop1:
  LDA $08E1,X
  STA $08E0,X
  LDA $0901,X
  STA $0900,X
  LDA $0921,X
  STA $0920,X
  LDA $0941,X
  STA $0940,X
  INX
  CPX #$1F
  BCC scrollcolumnloop1
  LDA SCRATCH+6
  STA $08FF
  LDA SCRATCH+7
  STA $091F
  LDA SCRATCH+8
  STA $093F
  LDA SCRATCH+9
  STA $095F
  JMP marqueeloop

  .org $3A00
renderaloop: ; this loop assembles characters in rendershort buffer
  LDA RENDERFRONTA
  CLC
  ADC #$01
  STA RENDERFRONTA
  ; for now, placeholder bitmap generation
  TAY
  AND #$7F
  TAX
  TYA
  STA RENDERSHORT,X
renderatest:
  LDA RENDERFRONTA
  SEC
  SBC RENDERRQA
  BMI renderaloop
  RTS

  .org $3B00
renderbloop: ; this loop applies bolden in-place in rendershort buffer
  LDA RENDERFRONTB
  CLC
  ADC #$01
  STA RENDERFRONTB
  CLC
  ADC RENDERBOLDEN
  STA RENDERRQA
  JSR renderatest
  
renderbtest:
  LDA RENDERFRONTB
  SEC
  SBC RENDERRQB
  BMI renderbloop
  RTS

  .org $3C00
rendercloop: ; this loop generates renderfinal buffer by yscaling rendershort buffer
  LDA RENDERFRONTC
  CLC
  ADC #$01
  STA RENDERFRONTC
  STA RENDERRQB
  JSR renderbtest
  LDA RENDERRQB
  AND #$7F
  TAX
  LDA RENDERSHORT,X
  STA SCRATCH+16 ; source byte
  LDA RENDERFRONTC
  AND #$1F
  TAX
  LDA #$08
  STA SCRATCH+17 ; source bit counter
renderyscaleloop1:
  LDA #00
  LSR SCRATCH+16 ; pull a source bit into carry flag
  ADC #00 ; capture carry flag
  STA SCRATCH+18 ; save carry flag
  LDY RENDERSCALEY
renderyscaleloop0:
  CLC
  LDA #$FF
  ADC SCRATCH+18 ; restore carry flag
  ROR RENDERFINAL3,X
  ROR RENDERFINAL2,X
  ROR RENDERFINAL1,X
  ROR RENDERFINAL0,X
  DEY
  BNE renderyscaleloop0
  DEC SCRATCH+17
  BNE renderyscaleloop1
  ; scale complete, but it's bottom-aligned with possible junk in top rows
  ; center the text vertically, and blank the junk
  LDA RENDERSCALEY
  CMP #$04
  BEQ renderctest ; if scaley = 4, this column is done
  LDA #$00
  STA RENDERFINAL0,X ; blank top rowgroup
  LDA RENDERSCALEY
  CMP #$03
  BEQ rendercj1 ; if scaley = 3, skip the following
  LDA RENDERFINAL2,X
  STA RENDERFINAL1,X
  LDA RENDERFINAL3,X
  STA RENDERFINAL2,X ; shift bottom two rowgroups up
  LDA #$00
  STA RENDERFINAL3,X ; blank the bottom rowgroup
rendercj1:
  ; now text occupies rowgroup 2, rowgroups 1-2, or rowgroups 1-3
  LDA RENDERSCALEY
  CMP #$02
  BEQ renderctest ; if scaley = 2, this column is done
  ; if scaley = 1 or 3, shift the rendered text up 4 rows
  LDY #$04
rendercloop0: ; do this 4 times:
  LSR RENDERFINAL3,X ; ] shift the rendered text in rowgroups 0-3 up one row
  ROR RENDERFINAL2,X ; ]
  ROR RENDERFINAL1,X ; ]
  ROR RENDERFINAL0,X ; ]
  DEY
  BNE rendercloop0
renderctest:
  LDA RENDERFRONTC
  SEC
  SBC RENDERRQC
  BMI rendercloop
  RTS

  .org $3D00
renderdloop: ; this loop applies slant in-place in renderfinal buffers
  LDA RENDERFRONTD
  CLC
  ADC #$01
  STA RENDERFRONTD
  ADC RENDERSLANTMAX
  STA RENDERRQC
  JSR renderctest ; run render c loop if necessary
  ; actually apply slant
DXW = SCRATCH+16 ; current row x shift amount, whole
DXF = SCRATCH+17 ; current row x shift amount, fraction
BMASK = SCRATCH+18
BUILDBYTE = SCRATCH+19
BUFPTR = SCRATCH+20
  ; initialize slant delta-x
  LDA RENDERSLANTBIASF
  STA DXF
  LDA #$00 ; should be RENDERSLANTBIASW
  STA DXW
  ; initialize buffer pointer
  LDA #<RENDERFINAL0
  STA BUFPTR
  LDA #>RENDERFINAL0
  STA BUFPTR+1
renderdslantloop1:  ; run this loop once per rowgroup
  LDA #$01
  STA BMASK
  LDA #$00
  STA BUILDBYTE
renderdslantloop0:  ; run this loop once per row
  LDA RENDERFRONTD
  CLC
  ADC DXW
  AND #$1F
  TAY
  LDA (BUFPTR),Y
  AND BMASK
  ORA BUILDBYTE
  STA BUILDBYTE
  LDA DXF
  CLC
  ADC RENDERSLANT
  STA DXF
  LDA DXW
  ADC #$00
  STA DXW
  ASL BMASK
  BCC renderdslantloop0
  LDA RENDERFRONTD
  AND #$1F
  TAY
  LDA BUILDBYTE
  STA (BUFPTR),Y
  LDA BUFPTR
  CLC
  ADC #RENDERFINAL1-RENDERFINAL0
  STA BUFPTR
  BNE renderdslantloop1
renderdtest:
  LDA RENDERFRONTD
  SEC
  SBC RENDERRQD
  BMI renderdloop
  RTS
