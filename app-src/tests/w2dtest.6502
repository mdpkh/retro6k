  .org $1F4C ; this may need to be adjusted to allow room for header
header:
  .text "\x47\xA9\x02\x6A\xBB\x47\xF3\xA7" ; cartridge file format 1986c
  .word pflags-header ; file offset (LE) to base address space page flags
  .word $0000 ; upper bytes of 4-byte number
  .word cartromstart-header ; file offset (LE) to base address space data start
  .word $0000 ; upper bytes of 4-byte number
extensions:
  .text "\x00\x00\x00\x00" ; extensions format not yet defined
pflags:
  ; flags for pages $20xx-$BFxx
  ; 00: floating (no memory installed at this address)
  ; 01: ROM
  ; 02: RAM
  ; 03: NVM (persistent storage in cartridge)
  ; 04: bank-switched flags
  .blk $10,$01 ; (4K ROM)
  .blk $90,$00 ; (36K floating)
headerend:
  .org $2000 ; actual data contained on emulated cartridge starts here
cartromstart:
  .text "Wo\204De Test" ; must be 10 bytes
  .text "\x47\xA9\x0C\x1E" ; cartridge signature, must be 47 A9 0C 1E
  .word entry ; cartridge code entry point
interruptroutine: ; this label must equal $2010
  RTI
FVMCDEST   = $03F8
FVMCSRC    = $03F9
  .include ../include/subroutines.6502
entry:
  LDA #$20
  ; TODO: blank out certain cells
  ; copy system font
  LDY #$E0 ; system font source page start
  LDA #$10 ; video RAM font page start
copyfontpageloop:
  JSR WAITVSCANX ; wait for vertical retrace (preserve A & Y registers please)
  ; enable fast video memory copy
  CLC
  STA FVMCDEST
  STY FVMCSRC
  LDX #$00
copyfontbyteloop:
  STA $00,X ; actual address and value written is overridden by fast video memory copy circuit
  INX
  STA $00,X
  INX
  STA $00,X
  INX
  STA $00,X
  INX
  BNE copyfontbyteloop
  ; disable fast video memory copy
  ; X should be zero
  STX FVMCDEST
  INY ; increment source page
  CLC
  ADC #$01 ; increment destination page
  CMP #$18 ; compare against stop page number
  BNE copyfontpageloop
  JSR WAITVSCANX ; wait for vertical retrace
  ; initialize screen
  LDX #$00
initscreenloop:
  ; output lines
  LDA datatextoutputfill,X
  STA $0800,X
  STA $0820,X
  STA $0840,X
  STA $0860,X
  STA $0880,X
  STA $08A0,X
  STA $08C0,X
  STA $08E0,X
  STA $0900,X
  STA $0920,X
  STA $0940,X
  STA $0960,X
  STA $0980,X
  STA $09A0,X
  STA $09C0,X
  STA $09E0,X
  ; buffered output lines
  STA $0400,X
  STA $0420,X
  STA $0440,X
  STA $0460,X
  STA $0480,X
  STA $04A0,X
  STA $04C0,X
  STA $04E0,X
  ; status lines
  LDA datatext0,X
  STA $0A00,X
  LDA datatext1,X
  STA $0A20,X
  ; attribute bit 0
  LDA #$CF
  STA $0A40,X
  STA $0A60,X
  STA $0A80,X
  STA $0AA0,X
  STA $0AC0,X
  STA $0AE0,X
  STA $0B00,X
  STA $0B20,X
  LDA #$CC
  STA $0B40,X
  ; attribute bit 1
  STA $0B60,X
  STA $0B80,X
  STA $0BA0,X
  STA $0BC0,X
  STA $0BE0,X
  STA $0C00,X
  STA $0C20,X
  STA $0C40,X
  STA $0C60,X
  ; attribute bit 2
  STA $0C80,X
  STA $0CA0,X
  STA $0CC0,X
  STA $0CE0,X
  STA $0D00,X
  STA $0D20,X
  STA $0D40,X
  STA $0D60,X
  LDA #$FF
  STA $0D80,X
  ; attribute bit 3
  LDA #$00
  STA $0DA0,X
  STA $0DC0,X
  STA $0DE0,X
  STA $0E00,X
  STA $0E20,X
  STA $0E40,X
  STA $0E60,X
  STA $0E80,X
  STA $0EA0,X
  ; attribute bit 4
  STA $0EC0,X
  STA $0EE0,X
  STA $0F00,X
  STA $0F20,X
  STA $0F40,X
  STA $0F60,X
  STA $0F80,X
  STA $0FA0,X
  STA $0FC0,X
  ; palette
  LDA datasyscolors,X
  STA $0FE0,X
  INX
  TXA
  AND #$03
  BNE initscreenloop
  JSR WAITVSCANY
  TXA
  CMP #$20
  BNE initscreenloop
  ;--------------------------------------------------------------------
  ; initialize Word2Dec output area with filler
  LDA #$1D
  STA $8A
  LDA #$31
  STA $8B
  LDA #$32
  STA $8C
  LDA #$33
  STA $8D
  LDA #$34
  STA $8E
  LDA #$35
  STA $8F
  LDX #$00
  ;--------------------------------------------------------------------
  ; initialize state
  LDA #$00
  STA $00
  STA $08
  STA $09
  STA $10
  STA $11
  STA $12
  STA $13
  ; main loop
mainloop:
  ; generate and display a line of output
  TAY
  JSR NUMLINE
startkeyboardproc:
  ; read and process keyboard input
  LDA $0244
  BEQ endkeyboardproc
  AND #$DF ; case/shift insensitive
  CMP #$00 ; space
  BEQ pausetoggle
  CMP #$46 ; F
  BEQ flagstoggle
  CMP #$43 ; C
  BEQ carrytoggle
  CMP #$56 ; V
  BEQ overflowtoggle
  CMP #$10 ; zero
  BEQ bumpnybble0
  CMP #$19 ; 9
  BEQ bumpnybble1
  CMP #$18 ; 8
  BEQ bumpnybble2
  CMP #$17 ; 7
  BEQ bumpnybble3
endkeyboardproc:
  LDA $10
  BNE startkeyboardproc
  CLC
  LDA $00
  ADC #$01
  AND #$0F
  STA $00
  INC $08
  BNE mainloop
  INC $09
  JMP mainloop
pausetoggle:
  LDA $10
  EOR $01
  STA $10
  JMP endkeyboardproc
flagstoggle:
  LDA $11
  EOR $01
  STA $11
  BNE displayflagson
displayflagsoff:
  JSR WAITVSCANA
  LDA datatext0+0
  STA $0A00
  LDA datatext0+1
  STA $0A01
  LDA datatext0+2
  STA $0A02
  LDA datatext0+3
  STA $0A03
  LDA datatext0+4
  STA $0A04
  LDA datatext0+5
  STA $0A05
  LDA datatext0+6
  STA $0A06
  LDA datatext0+7
  STA $0A07
  LDA datatext0+12
  STA $0A0C
  LDA datatext0+13
  STA $0A0D
  LDA datatext0+14
  STA $0A0E
  LDA datatext0+15
  STA $0A0F
  LDA datatext0+16
  STA $0A10
  LDA datatext0+17
  STA $0A11
  LDA datatext0+18
  STA $0A12
  LDA datatext0+19
  STA $0A13
  LDA datatext0+24
  STA $0A18
  LDA datatext0+25
  STA $0A19
  LDA datatext0+26
  STA $0A1A
  LDA datatext0+27
  STA $0A1B
  LDA datatext0+28
  STA $0A1C
  LDA datatext0+29
  STA $0A1D
  LDA datatext0+30
  STA $0A1E
  LDA datatext0+31
  STA $0A1F
  LDA datatext1+14
  STA $0A2E
  STA $0A2F
  STA $0A30
  STA $0A3D
  STA $0A3E
  STA $0A3F
  JMP endkeyboardproc
displayflagson:
  JSR WAITVSCANA
  LDA datatext0+32
  STA $0A00
  LDA datatext0+33
  STA $0A01
  LDA datatext0+34
  STA $0A02
  LDA datatext0+35
  STA $0A03
  LDA datatext0+36
  STA $0A04
  LDA datatext0+37
  STA $0A05
  LDA datatext0+38
  STA $0A06
  LDA datatext0+39
  STA $0A07
  LDA datatext0+44
  STA $0A0C
  LDA datatext0+45
  STA $0A0D
  LDA datatext0+46
  STA $0A0E
  LDA datatext0+47
  STA $0A0F
  LDA datatext0+48
  STA $0A10
  LDA datatext0+49
  STA $0A11
  LDA datatext0+50
  STA $0A12
  LDA datatext0+51
  STA $0A13
  LDA datatext0+56
  STA $0A18
  LDA datatext0+57
  STA $0A19
  LDA datatext0+58
  STA $0A1A
  LDA datatext0+59
  STA $0A1B
  LDA datatext0+60
  STA $0A1C
  LDA datatext0+61
  STA $0A1D
  LDA datatext0+62
  STA $0A1E
  LDA datatext0+63
  STA $0A1F
  LDX #$00
  LDA $12
  BEQ displayflagsoncarry
  LDX #$03
displayflagsoncarry:
  LDA datatext1+32,X
  STA $0A2E
  LDA datatext1+33,X
  STA $0A2F
  LDA datatext1+34,X
  STA $0A30
  LDX #$00
  LDA $13
  BEQ displayflagsonoverflow
  LDX #$03
displayflagsonoverflow:
  LDA datatext1+32,X
  STA $0A3D
  LDA datatext1+33,X
  STA $0A3E
  LDA datatext1+34,X
  STA $0A3F
  JMP endkeyboardproc
carrytoggle:
  LDA $12
  EOR $01
  STA $12
  LDA $11
  BEQ endkeyboardproc
  LDX #$00
  LDA $12
  BEQ displaycarry
  LDX #$03
displaycarry:
  JSR WAITVSCANA
  LDA datatext1+32,X
  STA $0A2E
  LDA datatext1+33,X
  STA $0A2F
  LDA datatext1+34,X
  STA $0A30
  JMP endkeyboardproc
overflowtoggle:
  LDA $13
  EOR $01
  STA $13
  LDA $11
  BEQ endkeyboardproc
  LDX #$00
  LDA $13
  BEQ displayoverflow
  LDX #$03
displayoverflow:
  JSR WAITVSCANA
  LDA datatext1+32,X
  STA $0A3D
  LDA datatext1+33,X
  STA $0A3E
  LDA datatext1+34,X
  STA $0A3F
  JMP endkeyboardproc
bumpnybble0:
bumpnybble1:
bumpnybble2:
bumpnybble3:
  JMP endkeyboardproc

NUMLINE:
  ; Process the value already stored in $88-9 and display results on
  ; screen line identified by Y register (which is not preserved as given)
  TYA
  ASL
  ASL
  ASL
  ASL
  ASL
  TAY
  LDA #$08 ; video memory page
  ADC #$00 ; carry the 1 from shifts above
  STA $01 ; save for later
  LDA $08
  STA $88
  JSR BYTETOHEX
  LDA $86
  STA $0522
  LDA $87
  STA $0523
  LDA $09
  STA $89
  JSR BYTETOHEX
  LDA $86
  STA $0520
  LDA $87
  STA $0521
  LDA $11
  BNE nlflagsoncol1
nlflagsoffcol1:
  JSR WORD2DECP
  JMP nlproccol1
nlflagsoncol1:
  JSR ASSERTFLAGS
  JSR WORD2DECUA
nlproccol1:
  TXA
  CLC
  EOR #$FF
  ADC #$31
  STA $0400,Y
  LDA $8A
  STA $0402,Y
  LDA $8B
  STA $0403,Y
  LDA $8C
  STA $0404,Y
  LDA $8D
  STA $0405,Y
  LDA $8E
  STA $0406,Y
  LDA $8F
  STA $0407,Y
  LDA $08
  STA $88
  LDA $09
  STA $89
  LDA $11
  BNE nlflagsoncol2
nlflagsoffcol2:
  JSR WORD2DECN
  JMP nlproccol2
nlflagsoncol2:
  JSR ASSERTFLAGS
  JSR WORD2DECUS
nlproccol2:
  TXA
  CLC
  EOR #$FF
  ADC #$31
  STA $040C,Y
  LDA $8A
  STA $040E,Y
  LDA $8B
  STA $040F,Y
  LDA $8C
  STA $0410,Y
  LDA $8D
  STA $0411,Y
  LDA $8E
  STA $0412,Y
  LDA $8F
  STA $0413,Y
  LDA $08
  STA $88
  LDA $09
  STA $89
  LDA $11
  BNE nlflagsoncol3
nlflagsoffcol3:
  JSR WORD2DECBP
  JMP nlproccol3
nlflagsoncol3:
  JSR ASSERTFLAGS
  JSR WORD2DECS
nlproccol3:
  TXA
  CLC
  EOR #$FF
  ADC #$31
  STA $0418,Y
  LDA $8A
  STA $041A,Y
  LDA $8B
  STA $041B,Y
  LDA $8C
  STA $041C,Y
  LDA $8D
  STA $041D,Y
  LDA $8E
  STA $041E,Y
  LDA $8F
  STA $041F,Y
  LDA #$04
  STA FVMCSRC
  LDA $01
  STA FVMCDEST
  JSR WAITVSCANA
  STA $00,Y
  STA $01,Y
  STA $02,Y
  STA $03,Y
  STA $04,Y
  STA $05,Y
  STA $06,Y
  STA $07,Y
  STA $08,Y
  STA $09,Y
  STA $0A,Y
  STA $0B,Y
  STA $0C,Y
  STA $0D,Y
  STA $0E,Y
  STA $0F,Y
  STA $10,Y
  STA $11,Y
  STA $12,Y
  STA $13,Y
  STA $14,Y
  STA $15,Y
  STA $16,Y
  STA $17,Y
  STA $18,Y
  STA $19,Y
  STA $1A,Y
  STA $1B,Y
  STA $1C,Y
  STA $1D,Y
  STA $1E,Y
  STA $1F,Y
  LDA #$05
  STA FVMCSRC
  LDA #$0A
  STA FVMCDEST
  STA $20
  STA $21
  STA $22
  STA $23
  LDA #$00
  STA FVMCSRC
  STA FVMCDEST
  RTS

ASSERTFLAGS:
  CLV
  LDA $13
  BEQ afb2
  LDA #$60
  ADC #$60
afb2:
  CLC
  LDA $12
  BEQ afb1
  SEC
afb1:
  RTS

  .org $2D00
WORD2DECUS:
  BCS WORD2DECP
WORD2DECN:
  ; treat value as twos-complement negative
  LDA #$60 ; hyphen-minus for sign column
  STA $8A ; write sign column
  LDA $89 ; negate the input...
  EOR #$FF
  STA $89
  LDA $88
  EOR #$FF
  CLC
  ADC #$01
  STA $88
  LDA $89
  ADC #$00
  STA $89
  BNE w2dzeroinit
  LDA $88
  BNE w2dzeroinit
  ; if we get here, $88-89 are zero: write -65536 not -0
  LDA #$06
  STA $8B ; hundred-thousands and ten-thousands
  LDA #$55
  STA $8D ; thousands and hundreds
  LDA #$36
  STA $8F ; tens and units
  JMP w2dreturn5d ; skip the decimal logic and return result
  ; (jump is probably too long to make a BRA)
WORD2DECS:
  LDA $89 ; set N flag by high input byte
  BVS w2doverflow
  BMI WORD2DECN
  BPL WORD2DECP ; BRA
w2doverflow:
  BPL WORD2DECN
  BMI WORD2DECP ; BRA
WORD2DECUA:
  BCC WORD2DECP
WORD2DECBP:
  ; treat value as unsigned in range 65536-131071
  LDA #$20 ; space for sign column
  STA $8A ; write sign column (may be overwritten later)
  LDA #$06 ; digits initialization with 65536
  STA $8B ; hundred-thousands and ten-thousands
  LDA #$55
  STA $8D ; thousands and hundreds
  LDA #$36
  STA $8F ; tens and units
  SED ; begin adding data bits...
  BNE w2dbit0 ; (branch always; Z cleared by preceeding LDA)
WORD2DECP:
  ; treat value as unsigned in range 0-65535
  LDA #$20 ; space for sign column
  STA $8A ; write sign column
w2dzeroinit:
  LDA #$00 ; zero for digits initialization
  STA $8B ; hundred-thousands and ten-thousands
  STA $8D ; thousands and hundreds
  STA $8F ; tens and units
  SED ; begin adding data bits...
w2dbit0: ; all variants of WORD2DEC get here eventually
  LSR $89
  ROR $88
  BCC w2dbit1 ; note, carry flag is set for first ADC of each bit handler!
  LDA $8F  ; value is either 00 or 36
  ADC #$00 ; (add 1) carry is impossible, don't worry about other columns
  STA $8F
w2dbit1:
  LSR $89
  ROR $88
  BCC w2dbit2
  LDA $8F  ; value is either 00-01 or 36-37
  ADC #$01 ; (add 2) carry is impossible
  STA $8F
w2dbit2:
  LSR $89
  ROR $88
  BCC w2dbit3
  LDA $8F  ; value is either 00-03 or 36-39
  ADC #$03 ; (add 4) carry is impossible
  STA $8F
w2dbit3:
  LSR $89
  ROR $88
  BCC w2dbit4
  LDA $8F  ; value is either 00-07 or 36-43
  ADC #$07 ; (add 8) carry (to hundreds digit) is impossible
  STA $8F
w2dbit4:
  LSR $89
  ROR $88
  BCC w2dbit5
  LDA $8F  ; value is either 00-15 or 36-51
  ADC #$15 ; (add 16) carry (to hundreds digit) is impossible
  STA $8F
w2dbit5:
  LSR $89
  ROR $88
  BCC w2dbit6
  LDA $8F  ; value is either 00-31 or 36-67
  ADC #$31 ; (add 32) carry (to hundreds digit) is impossible
  STA $8F
w2dbit6:
  LSR $89
  ROR $88
  BCC w2dbit7
  LDA $8F  ; value is 00-99
  ADC #$63 ; (add 64) carry to hundreds digit is likely
  STA $8F
  LDA $8D  ; value is either 00 or 55
  ADC #$00 ; carry the 1 from previous ADC
  STA $8D
w2dbit7:
  LSR $89 ; most significant bit shifted out of upper input byte
  ROR $88
  BCC w2dbit8
  LDA $8F
  ADC #$27 ; add 128
  STA $8F
  LDA $8D  ; value is either 00-01 or 55-56
  ADC #$01 ; carry is impossible
  STA $8D
w2dbit8:
  LSR $88
  BCC w2dbit9
  LDA $8F
  ADC #$55 ; add 256
  STA $8F
  LDA $8D  ; value is either 00-02 or 55-57
  ADC #$02 ; carry is impossible
  STA $8D
w2dbit9:
  LSR $88
  BCC w2dbit10
  LDA $8F
  ADC #$11 ; add 512
  STA $8F
  LDA $8D  ; value is either 00-05 or 55-60
  ADC #$05 ; carry (to ten-thousands digit) is impossible
  STA $8D
w2dbit10:
  LSR $88
  BCC w2dbit11
  LDA $8F
  ADC #$23 ; add 1024
  STA $8F
  LDA $8D  ; value is either 00-10 or 55-65
  ADC #$10 ; carry (to ten-thousands digit) is impossible
  STA $8D
w2dbit11:
  LSR $88
  BCC w2dbit12
  LDA $8F
  ADC #$47 ; add 2048
  STA $8F
  LDA $8D  ; value is either 00-20 or 55-75
  ADC #$20 ; carry (to ten-thousands digit) is impossible
  STA $8D
w2dbit12:
  LSR $88
  BCC w2dbit13
  LDA $8F
  ADC #$95 ; add 4096
  STA $8F
  LDA $8D  ; value is either 00-40 or 55-96
  ADC #$40 ; carry to ten-thousands digit is possible
  STA $8D
  LDA $8B
  ADC #$00 ; carry the 1
  STA $8B
w2dbit13:
  LSR $88
  BCC w2dbit14
  LDA $8F
  ADC #$91 ; add 8192
  STA $8F
  LDA $8D  ; value is 00-99
  ADC #$81 ; carry is likely
  STA $8D
  LDA $8B
  ADC #$00
  STA $8B
w2dbit14:
  LSR $88
  BCC w2dbit15
  LDA $8F
  ADC #$83 ; add 16384
  STA $8F
  LDA $8D
  ADC #$63
  STA $8D
  LDA $8B
  ADC #$01
  STA $8B
w2dbit15:
  LSR $88
  BCC w2dcheckhigh
  LDA $8F
  ADC #$67 ; add 32768
  STA $8F
  LDA $8D
  ADC #$27
  STA $8D
  LDA $8B
  ADC #$03
  STA $8B
; format the output, below
w2dcheckhigh:
  CLD
  LDA $8B
  BEQ w2dcheckmid ; 4 or fewer digits (else 5 or 6)
  AND #$F0
  BEQ w2dreturn5d ; 5 digits (else 6)
  LSR A
  LSR A
  LSR A
  LSR A
  ORA #$30
  STA $8A ; write hundred-thousands digit (which is nonzero)
  LDA $8B
  AND #$0F
  ORA #$30
  STA $8B ; write ten-thousands digit
  LDA $8D ; pre-load thousands digit
  LDX #$FA ; -6
  BNE w2dwritemid ; (branch always; Z cleared by preceeding LDX)
w2dreturn5d:
  LDA $8B
  AND #$0F
  ORA #$30
  STA $8B ; write ten-thousands digit
  LDA $8D ; pre-load thousands digit
  LDX #$FB ; -5
  BNE w2dwritemid ; (branch always; Z cleared by preceeding LDX)
w2dcheckmid:
  ; before actually checking middle digits, ensure ten-thousands output is a space
  LDA #$20
  STA $8B
  LDA $8D
  BEQ w2dchecklow ; 1 or 2 digits (else 3 or 4)
  AND #$F0
  BEQ w2dreturn3d ; 3 digits (else 4)
  LDX #$FC ; -4
w2dwritemid: ; assume A holds (at least high nybble of) value at $8D
  LSR A
  LSR A
  LSR A
  LSR A
  ORA #$30
  STA $8C ; write thousands digit
  LDA $8D
  AND #$0F
  ORA #$30
  STA $8D ; write hundreds digit
  LDA $8F ; pre-load tens digit
  ORA #$01 ; writelow doesn't care about low nybble of A on entry, but we need to clear Zero status bit and can't overwrite X here
  BNE w2dwritelow ; (branch always; Z cleared by preceeding ORA)
w2dreturn3d:
  LDA #$20 ; space
  STA $8C ; thousands output
  LDA $8D
  AND #$0F
  ORA #$30
  STA $8D ; write hundreds digit
  LDA $8F ; pre-load tens digit
  LDX #$FD ; -3
  BNE w2dwritelow ; (branch always; Z cleared by preceeding LDX)
w2dchecklow:
  ; before actually checking low digits, ensure thousands and hundreds outputs are spaces
  LDA #$20 ; space
  STA $8C ; thousands output
  STA $8D ; hundreds output
  LDA $8F
  AND #$F0
  BEQ w2dreturn1d ; 1 digit (else 2)
  LDX #$FE ; -2
w2dwritelow: ; assume A holds (at least high nybble of) value at $8F
  LSR A
  LSR A
  LSR A
  LSR A
  ORA #$30
  STA $8E ; write tens digit
  LDA $8F
  AND #$0F
  ORA #$30
  STA $8F ; write ones digit
  RTS
w2dreturn1d:
  LDA #$20 ; space
  STA $8E ; tens output
  LDA $8F
  AND #$0F
  ORA #$30
  STA $8F ; write ones digit
  LDX #$FF ; -1
  RTS

  .org $2F00
datatext0:
  .text "Positive    Negative    Big Posi"
  .text "Unsignd\x1D    Unsignd`    Signd\x1D?`" ; '\x1D'='+', '`'='-', '?'='/'
datatext1:
  .text "````    Carry\033```   Overflow\033```" ; '\033'=':'
  .text "ClrSet"
  .align 5
datatextoutputfill:
  .text "` ``````    ` ``````    ` ``````"
  .org $2FE0
datasyscolors:
  .byte $00,$11,$22,$33,$44,$55,$66,$77
  .byte $80,$91,$A2,$B3,$C4,$D5,$E6,$F7
  .byte $08,$19,$2A,$3B,$4C,$5D,$6E,$7F
  .byte $88,$99,$AA,$BB,$CC,$DD,$EE,$FF


